import React from "react";
import { ReactWrapper, mount } from "enzyme";

// Components
import QRCode, { IQRCodeProps } from "./index";

const QRForeground = {
    magenta: "var(--guit-sem-color-foreground-accent-magenta)",
    secondary: "var(--guit-sem-color-foreground-neutral-2)",
    inverse: "var(--guit-sem-color-foreground-inverse-notheme)"
};

const EmbeddedIcon = () => (
    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path
            d="M21.9687 7.62106C21.8921 7.38978 21.7032 7.22364 21.4719 7.20084L19.3301 6.99073L20.6217 5.11439C20.765 4.90428 20.7438 4.59645 20.5663 4.41891C20.4669 4.31956 20.335 4.25278 20.2014 4.25278C20.0679 4.25278 19.9474 4.30816 19.848 4.39611L16.5253 7.52008C16.3494 7.68621 16.294 7.9403 16.3592 8.17158C16.4357 8.40287 16.6247 8.569 16.856 8.59181L18.9978 8.81332L17.7062 10.6897C17.5628 10.9112 17.584 11.2076 17.7616 11.3851C17.8609 11.4845 17.9928 11.5399 18.1264 11.5399C18.2583 11.5399 18.3805 11.4845 18.4798 11.3965L21.8025 8.27257C21.9784 8.10643 22.0452 7.85235 21.9687 7.62106Z"
            fill="#A60063"
        />
        <path
            d="M7.75117 16.0206C7.66321 15.8773 7.54106 15.7339 7.37655 15.6118C7.21042 15.4896 7.06709 15.3903 6.94656 15.3137C6.82603 15.2372 6.64849 15.159 6.41721 15.0824C6.1957 15.0059 6.01979 14.9505 5.89926 14.9163C5.77873 14.8821 5.6012 14.8397 5.35851 14.773C5.137 14.7176 4.9725 14.685 4.87314 14.6508C4.76238 14.628 4.63045 14.584 4.47572 14.5287C4.32099 14.4733 4.20046 14.4179 4.12228 14.3625C4.0441 14.3071 3.97895 14.2306 3.92357 14.1524C3.86819 14.0645 3.83562 13.9651 3.83562 13.8543C3.83562 13.6117 3.94637 13.4341 4.16626 13.3022C4.38614 13.1703 4.65163 13.1149 4.94969 13.1149C5.29173 13.1149 5.56699 13.2028 5.79991 13.369C6.03282 13.5351 6.14195 13.7892 6.14195 14.1084H7.83098C7.83098 13.3136 7.57689 12.6963 7.08012 12.2435C6.58334 11.7907 5.87646 11.5708 4.98227 11.5708C4.08808 11.5708 3.39259 11.7809 2.88442 12.1881C2.37624 12.6083 2.11238 13.1817 2.11238 13.9325C2.11238 14.1084 2.13519 14.286 2.16776 14.4505C2.20034 14.615 2.25572 14.7599 2.29969 14.8805C2.35507 15.0026 2.43162 15.1231 2.53098 15.2339C2.63033 15.3447 2.72969 15.444 2.80624 15.5206C2.89419 15.5971 3.00495 15.6753 3.15968 15.7421C3.31441 15.8186 3.43494 15.874 3.52452 15.918C3.62388 15.962 3.75581 16.0059 3.93334 16.0613C4.11088 16.1167 4.24281 16.1493 4.33076 16.1721C4.41872 16.1949 4.55227 16.2275 4.73958 16.2714C4.96109 16.3268 5.137 16.3708 5.24776 16.3936C5.35851 16.4262 5.50184 16.4701 5.65658 16.5255C5.82271 16.5809 5.94324 16.6477 6.02142 16.7014C6.09797 16.7568 6.16475 16.8334 6.23153 16.9229C6.28691 17.0223 6.31948 17.1216 6.31948 17.2438C6.31948 17.5305 6.19733 17.752 5.94487 17.9165C5.69241 18.081 5.39272 18.1592 5.05068 18.1592C4.87477 18.1592 4.70864 18.1364 4.5539 18.0924C4.39917 18.0484 4.25584 17.9816 4.13368 17.8937C4.01152 17.8057 3.91217 17.6836 3.83562 17.5402C3.75907 17.3969 3.72486 17.2308 3.72486 17.0321H2C2 17.8709 2.27526 18.5436 2.83881 19.0192C3.40237 19.5045 4.14183 19.7472 5.05719 19.7472C5.62074 19.7472 6.12729 19.6593 6.55891 19.472C7.00031 19.296 7.35375 19.0078 7.64041 18.6103C7.91567 18.2243 8.06063 17.7487 8.06063 17.1982C8.06063 16.9555 8.02806 16.734 7.96128 16.5255C7.9173 16.3382 7.83912 16.1607 7.75117 16.0173V16.0206Z"
            fill="#A60063"
        />
        <path
            d="M15.0627 18.5924C14.5105 18.967 13.859 19.1657 13.1098 19.1657C12.4469 19.1657 11.8508 19.0224 11.3214 18.7243C10.7921 18.4263 10.3833 18.0077 10.0966 17.4767C9.79852 16.9474 9.65519 16.3398 9.65519 15.6672C9.65519 14.9945 9.79852 14.387 10.0966 13.8462C10.3947 13.3055 10.8035 12.8852 11.3214 12.5986C11.8394 12.3005 12.4355 12.1572 13.0984 12.1572C13.8265 12.1572 14.4666 12.3331 15.0073 12.6979C15.5481 13.0514 15.9455 13.5595 16.1882 14.1882H16.7729C16.5188 13.3934 16.0562 12.7647 15.4047 12.3005C14.7418 11.8363 13.9812 11.605 13.0984 11.605C12.3264 11.605 11.6407 11.7809 11.0234 12.123C10.4061 12.465 9.93045 12.9504 9.58841 13.5693C9.24637 14.1882 9.07047 14.8935 9.07047 15.6769C9.07047 16.8578 9.44508 17.8285 10.2073 18.5908C10.9696 19.3531 11.9289 19.7277 13.0984 19.7277C13.7059 19.7277 14.2581 19.6169 14.7532 19.397C15.2614 19.1755 15.68 18.8677 16.0448 18.4589C16.3983 18.05 16.6621 17.5647 16.8283 17.0125H16.2549C16.0123 17.6754 15.6148 18.2048 15.0627 18.5908V18.5924Z"
            fill="#A60063"
        />
    </svg>
);

describe("QRCode ", () => {
    let setup: ReactWrapper<IQRCodeProps>;

    beforeEach(() => {
        setup = mount(<QRCode value="https://geneui-storybook.softconstruct.com/" />);
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    it("renders without crashing", () => {
        expect(setup.exists()).toBeTruthy();
    });

    it("renders className prop correctly", () => {
        const className = "test-class";
        const wrapper = setup.setProps({ className });

        expect(wrapper.hasClass(className)).toBeTruthy();
    });

    it("renders level prop correctly", () => {
        const level = "H";
        const wrapper = setup.setProps({ level });

        expect(wrapper.find("QRCodeSVG").prop("level")).toBe("H");
    });

    it("renders appearance prop correctly", () => {
        const appearance = "secondary";
        const wrapper = setup.setProps({ appearance });

        expect(wrapper.find("QRCodeSVG").prop("fgColor")).toBe(QRForeground[appearance]);
    });

    it("renders value prop correctly", () => {
        const value = "test-link";
        const wrapper = setup.setProps({ value });

        expect(wrapper.find("QRCodeSVG").prop("value")).toBe(value);
    });

    it("renders EmbeddedIcon prop correctly", () => {
        const wrapper = setup.setProps({ EmbeddedIcon: <EmbeddedIcon /> });

        expect(wrapper.find(".qRCode__logo").exists()).toBeTruthy();
    });
});
